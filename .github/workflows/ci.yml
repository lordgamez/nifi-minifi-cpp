name: "MiNiFi-CPP CI"
on: [push, pull_request, workflow_dispatch]
env:
  DOCKER_CMAKE_FLAGS: -DDOCKER_VERIFY_THREAD=3 -DUSE_SHARED_LIBS= -DSTRICT_GSL_CHECKS=AUDIT -DCI_BUILD=ON -DDISABLE_JEMALLOC=ON -DENABLE_AWS=ON -DENABLE_LIBRDKAFKA=ON -DENABLE_MQTT=ON -DENABLE_AZURE=ON -DENABLE_SQL=ON \
    -DENABLE_SPLUNK=ON -DENABLE_GCP=ON -DENABLE_OPC=ON -DENABLE_PYTHON_SCRIPTING=ON -DENABLE_LUA_SCRIPTING=ON -DENABLE_KUBERNETES=ON -DENABLE_TEST_PROCESSORS=ON -DENABLE_PROMETHEUS=ON \
    -DENABLE_ELASTICSEARCH=OFF -DDOCKER_BUILD_ONLY=ON
  SCCACHE_GHA_ENABLE: true
jobs:
  ubuntu_22_04_clang:
    name: "ubuntu-22.04-clang"
    runs-on: ubuntu-22.04
    timeout-minutes: 240
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - name: cache restore
        uses: actions/cache/restore@v3
        with:
          path: ~/.ccache
          key: ubuntu-22.04-all-clang-ccache-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ubuntu-22.04-all-clang-ccache-${{github.ref}}-
            ubuntu-22.04-all-clang-ccache-refs/heads/main-
      - id: install_deps
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy main" | sudo tee -a /etc/apt/sources.list
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install -y ccache libfl-dev libpcap-dev libusb-1.0-0-dev libpng-dev libgps-dev clang-16 clang-tidy-16 libc++-16-dev libc++abi-16-dev libc++1-16 libc++abi1-16 libunwind-16 libsqliteodbc lua5.3 liblua5.3-dev flake8 parallel
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          echo -e "127.0.0.1\t$HOSTNAME" | sudo tee -a /etc/hosts > /dev/null
          mkdir -p ~/.ccache
      - id: free_disk_space
        run: |
          # We can gain additional disk space on the Ubuntu runners thanks to these suggestions:
          # https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          # https://github.com/actions/runner-images/issues/2606#issuecomment-772683150
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: build
        run: |
          export CC=clang-16
          export CXX=clang++-16
          ./bootstrap.sh -e -t
          cd build
          export CXXFLAGS="${CXXFLAGS} -stdlib=libc++"
          export LDFLAGS="${LDFLAGS} -stdlib=libc++"
          cmake -DUSE_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCI_BUILD=ON -DSTRICT_GSL_CHECKS=AUDIT -DFAIL_ON_WARNINGS=ON -DENABLE_AWS=OFF -DENABLE_AZURE=OFF -DENABLE_BUSTACHE=OFF -DENABLE_COAP=OFF \
              -DENABLE_ENCRYPT_CONFIG=OFF -DENABLE_GPS=OFF -DENABLE_LIBRDKAFKA=OFF -DENABLE_MQTT=OFF -DENABLE_NANOFI=OFF -DENABLE_OPC=OFF -DENABLE_OPENCV=OFF \
              -DENABLE_OPENWSMAN=OFF -DENABLE_OPS=OFF -DENABLE_PCAP=OFF -DENABLE_SENSORS=OFF -DENABLE_SFTP=OFF -DENABLE_SQL=OFF -DENABLE_SYSTEMD=OFF \
              -DENABLE_USB_CAMERA=OFF -DENABLE_PYTHON_SCRIPTING=OFF -DENABLE_LUA_SCRIPTING=OFF -DENABLE_KUBERNETES=OFF -DENABLE_GCP=OFF -DENABLE_PROCFS=OFF -DENABLE_PROMETHEUS=OFF -DENABLE_ELASTICSEARCH=OFF \
              -DSKIP_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cmake --build . --parallel $(nproc)
      - id: cache_save
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ~/.ccache
          key: ubuntu-22.04-all-clang-ccache-${{github.ref}}-${{github.sha}}
      - name: test
        id: test
        run: |
          ls -la ~/.ccache
