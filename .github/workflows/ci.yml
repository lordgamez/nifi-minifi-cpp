name: "MiNiFi-CPP CI"
on: [push, pull_request, workflow_dispatch]
env:
  DOCKER_CMAKE_FLAGS: -DDOCKER_VERIFY_THREAD=3 -DUSE_SHARED_LIBS= -DSTRICT_GSL_CHECKS=AUDIT -DCI_BUILD=ON -DDISABLE_JEMALLOC=ON -DENABLE_AWS=ON -DENABLE_LIBRDKAFKA=ON -DENABLE_MQTT=ON -DENABLE_AZURE=ON -DENABLE_SQL=ON \
    -DENABLE_SPLUNK=ON -DENABLE_GCP=ON -DENABLE_OPC=ON -DENABLE_PYTHON_SCRIPTING=ON -DENABLE_LUA_SCRIPTING=ON -DENABLE_KUBERNETES=ON -DENABLE_TEST_PROCESSORS=ON -DENABLE_PROMETHEUS=ON \
    -DENABLE_ELASTICSEARCH=OFF -DDOCKER_BUILD_ONLY=ON
  SCCACHE_GHA_ENABLE: true
jobs:
  centos:
    name: "centos"
    runs-on: ubuntu-20.04
    timeout-minutes: 180
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - name: cache restore
        uses: actions/cache/restore@v3
        with:
          path: ~/.ccache
          key: centos-ccache-${{github.ref}}-${{github.sha}}
          restore-keys: |
            centos-ccache-${{github.ref}}-
            centos-ccache-refs/heads/main-
      - id: install_deps
        run: |
          sudo apt update
          sudo apt install -y ccache
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - id: build
        run: |
          if [ -d ~/.ccache ]; then mv ~/.ccache .; fi
          # centos build can run out of the github runners' disk space if built with RelWithDebInfo so we keep the Release build here
          mkdir build && cd build && cmake -DUSE_SHARED_LIBS=ON -DCI_BUILD=ON -DCMAKE_BUILD_TYPE=Release -DSTRICT_GSL_CHECKS=AUDIT -DFAIL_ON_WARNINGS=ON -DENABLE_AWS=ON -DENABLE_AZURE=ON \
              -DENABLE_COAP=ON -DENABLE_ENCRYPT_CONFIG=ON -DENABLE_GPS=ON -DENABLE_LIBRDKAFKA=ON -DENABLE_MQTT=ON -DENABLE_NANOFI=ON -DENABLE_OPC=ON \
              -DENABLE_OPENCV=ON -DENABLE_OPENWSMAN=ON -DENABLE_OPS=ON -DENABLE_SENSORS=ON -DENABLE_SQL=ON -DENABLE_SYSTEMD=ON \
              -DENABLE_USB_CAMERA=ON -DENABLE_PYTHON_SCRIPTING=ON -DENABLE_LUA_SCRIPTING=ON -DENABLE_KUBERNETES=ON -DENABLE_GCP=ON -DENABLE_PROCFS=ON -DENABLE_PROMETHEUS=ON \
              -DENABLE_ELASTICSEARCH=ON -DDOCKER_SKIP_TESTS=OFF -DDOCKER_BUILD_ONLY=ON -DDOCKER_CCACHE_DUMP_LOCATION=$HOME/.ccache .. && make centos-test
      - name: cache save
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ~/.ccache
          key: centos-ccache-${{github.ref}}-${{github.sha}}
      - id: test
        run: |
          # Set core file size limit to 1GiB
          ulimit -c 1048576
          echo '/cores/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern
          sudo mkdir /cores
          sudo chmod 777 /cores
          docker run --name centos-test --init --ulimit core=1048576 --mount type=bind,source=/cores,target=/cores apacheminificpp:$(docker images | grep apacheminificpp | grep centos | awk '{print $2}') bash -c 'cd /opt/minifi/build && make test ARGS="--timeout 300 -j8 --output-on-failure"'
      - name: check-cores
        if: ${{ failure() && steps.test.conclusion == 'failure' }}
        run: |
          if [ "$(ls -A /cores)" ]; then
            echo "CORES_EXIST=true" >> $GITHUB_ENV;
            docker cp centos-test:/opt/minifi/build/bin /tmp
            sudo chmod -R 777 /cores
          fi
      - uses: actions/upload-artifact@v3.1.2
        if: ${{ failure() && env.CORES_EXIST == 'true' }}
        with:
          name: centos-crashes
          path: /cores
      - uses: actions/upload-artifact@v3.1.2
        if: ${{ failure() && env.CORES_EXIST == 'true' }}
        with:
          name: centos-binaries
          path: /tmp/bin
