name: "MiNiFi-CPP CI"
on: [push, pull_request, workflow_dispatch]
env:
  DOCKER_CMAKE_FLAGS: -DDOCKER_VERIFY_THREAD=3 -DUSE_SHARED_LIBS= -DSTRICT_GSL_CHECKS=AUDIT -DCI_BUILD=ON -DDISABLE_JEMALLOC=ON -DENABLE_AWS=OFF -DENABLE_LIBRDKAFKA=OFF -DENABLE_MQTT=OFF -DENABLE_AZURE=OFF -DENABLE_SQL=OFF \
    -DENABLE_SPLUNK=OFF -DENABLE_GCP=OFF -DENABLE_OPC=OFF -DENABLE_PYTHON_SCRIPTING=OFF -DENABLE_LUA_SCRIPTING=OFF -DENABLE_KUBERNETES=ON -DENABLE_TEST_PROCESSORS=ON -DENABLE_PROMETHEUS=OFF \
    -DENABLE_ELASTICSEARCH=OFF -DENABLE_GRAFANA_LOKI=OFF -DDOCKER_BUILD_ONLY=ON
  SCCACHE_GHA_ENABLE: true
  CCACHE_DIR: ${{ GITHUB.WORKSPACE }}/.ccache
jobs:
  docker_build:
    name: "Docker build for integration tests"
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - name: cache restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: docker-ccache-${{github.ref}}-${{github.sha}}
          restore-keys: |
            docker-ccache-${{github.ref}}-
            docker-ccache-refs/heads/main
      - id: build
        run: |
          mkdir build
          cd build
          cmake ${DOCKER_CMAKE_FLAGS} -DDOCKER_CCACHE_DUMP_LOCATION=${{ env.CCACHE_DIR }} ..
          make docker
      - name: cache save
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ${{ env.CCACHE_DIR }}
          key: docker-ccache-${{github.ref}}-${{github.sha}}
      - name: Save docker image
        run: cd build && docker save -o minifi_docker.tar apacheminificpp:$(grep CMAKE_PROJECT_VERSION:STATIC CMakeCache.txt | cut -d "=" -f2)
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: minifi_docker
          path: build/minifi_docker.tar
  docker_tests:
    name: "Docker integration tests"
    needs: docker_build
    runs-on: ubuntu-20.04
    timeout-minutes: 180
    steps:
      - id: checkout
        uses: actions/checkout@v3
      - id: run_cmake
        name: Run CMake
        run: |
          mkdir build
          cd build
          cmake ${DOCKER_CMAKE_FLAGS} ..
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: minifi_docker
          path: build
      - name: Load Docker image
        run: |
          docker load --input ./build/minifi_docker.tar
      - id: install_deps
        name: Install dependencies for Docker Verify
        run: |
          sudo apt update
          sudo apt install -y python3-virtualenv
      - id: test
        name: Docker Verify
        working-directory: ./build
        run: make docker-verify
      - name: Test Reporter
        if: always()
        uses: phoenix-actions/test-reporting@v12
        with:
          name: Docker integration tests
          path: build/behavex_output/behave/*.xml
          reporter: java-junit
          output-to: 'step-summary'
          only-summary: 'true'
          list-tests: 'failed'
          list-suites: 'failed'
      - name: Upload artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: behavex_output
          path: build/behavex_output
